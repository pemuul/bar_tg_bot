import telebot
import json
import threading
import time
import schedule
import os
import random

from telebot import types
from datetime import datetime, timedelta


BOT_TOKEN = os.environ.get('BOT_TOKEN')
ADMIN_ID = os.environ.get('ADMIN_ID')
bot = telebot.TeleBot(BOT_TOKEN)

# –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞—Ä–∞ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
WAIT_TIME_SECONDS = 30
WAIT_TIME_SCHEDULE_EVERY = 0.1
second_delete_gift = 600 # 5 –º–∏–Ω—É—Ç

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ª—é–¥—è—Ö –≤ –±–∞—Ä–µ
if not os.path.isfile('people_in_bar.json'):
    with open('people_in_bar.json', 'w') as file:
        json.dump([], file)

# –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞—Ä–∞
def remove_users_from_bar():
    current_time = time.time()
    users_to_remove = []
    
    with open('people_in_bar.json', 'r') as file:
        data = json.load(file)

    for user in data:
        user_id = user["id"]
        join_time = user["join_time"]
        if current_time - join_time >= WAIT_TIME_SECONDS:
            users_to_remove.append(user_id)

    for user_id in users_to_remove:
        #bot.send_message(user_id, "–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –±–∞—Ä. –ù–∞–∂–º–∏—Ç–µ '–Ø –≤ –±–∞—Ä–µ', —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è.")
        bot.send_message(user_id, "–í—ã –≤—Å—ë –µ—â—ë –≤ –±–∞—Ä–µ?\n–ï—Å–ª–∏ –¥–∞, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ '–Ø –≤ –±–∞—Ä–µ'\n–ò –ø—Ä–æ–∫—Ä—É—Ç–∏—Ç–µ –∫–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã!")
        data = [user for user in data if user["id"] != user_id]

    with open('people_in_bar.json', 'w') as file:
        json.dump(data, file, indent=4)

# –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
schedule.every(WAIT_TIME_SCHEDULE_EVERY).minutes.do(remove_users_from_bar)

# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def schedule_thread():
    while True:
        schedule.run_pending()
        time.sleep(1)

scheduler_thread = threading.Thread(target=schedule_thread)
scheduler_thread.daemon = True
scheduler_thread.start()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    bot.send_message(message.chat.id, "–Ø –±–æ—Ç –±–∞—Ä–∞ ...\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫—Ç–æ —Å–µ–π—á–∞—Å –≤ –±–∞—Ä–µ, –Ω–∞–∂–º–∏ '–ö—Ç–æ –≤—ã –±–∞—Ä–µ?'\n–ß—Ç–æ–±—ã –ø–æ–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É –∏ –≤—ã–∏–≥—Ä–∞—Ç—å –ø—Ä–∏–∑ üéÅ, –Ω–∞–∂–º–∏ '–Ø –≤ –±–∞—Ä–µ', –µ—Å–ª–∏ —Ç—ã –≤ –Ω—ë–º!\n–ü—Ä–∏–∑–º –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–∏ 5 –º–∏–Ω—Ç—Éüïê, –ø–æ—Ç–æ–º –æ–Ω –ø—Ä–æ–∞–¥—ë—Ç!", reply_markup=send_keyboard())
    print(message.chat.id)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
def send_keyboard():
    markup = telebot.types.ReplyKeyboardMarkup(row_width=2)
    item1 = telebot.types.KeyboardButton("–Ø –≤ –±–∞—Ä–µ")
    item2 = telebot.types.KeyboardButton("–ö—Ç–æ –≤ –±–∞—Ä–µ?")
    markup.add(item1, item2)
    #bot.send_message(chat_id, "", reply_markup=markup)
    return markup

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–µ–ª–æ–≤–µ–∫–∞ –≤ –±–∞—Ä –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª
def add_person_to_bar(user_id, username, full_name):
    current_time = time.time()
    with open('people_in_bar.json', 'r') as file:
        data = json.load(file)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞—Ä–µ
    user_exists = any(user["id"] == user_id for user in data)

    if not user_exists:
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–µ–ª–æ–≤–µ–∫–µ –≤ –±–∞—Ä
        new_person = {
            "id": user_id,
            "username": username,
            "full_name": full_name,
            "join_time": current_time
        }
        data.append(new_person)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
        with open('people_in_bar.json', 'w') as file:
            json.dump(data, file, indent=4)

        return True
    else:
        return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–Ø –≤ –±–∞—Ä–µ"
@bot.message_handler(func=lambda message: message.text == "–Ø –≤ –±–∞—Ä–µ")
def i_am_in_the_bar(message):
    user_id = message.from_user.id
    username = message.from_user.username
    full_name = message.from_user.first_name + " " + message.from_user.last_name if message.from_user.last_name else message.from_user.first_name

    added = add_person_to_bar(user_id, username, full_name)

    if added:
        bot.send_message(message.chat.id, f"{full_name} (@{username}) –¥–æ–±–∞–≤–ª–µ–Ω(–∞) –≤ –±–∞—Ä!", reply_markup=send_keyboard())
        start_roulette(message)
    else:
        bot.send_message(message.chat.id, "–í—ã —É–∂–µ –≤ –±–∞—Ä–µ!", reply_markup=send_keyboard())

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–Ω–æ–≤–∞
    #send_keyboard(message.chat.id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö—Ç–æ –≤ –±–∞—Ä–µ?"
@bot.message_handler(func=lambda message: message.text == "–ö—Ç–æ –≤ –±–∞—Ä–µ?")
def who_is_in_the_bar(message):
    with open('people_in_bar.json', 'r') as file:
        data = json.load(file)

    response = "–õ—é–¥–∏ –≤ –±–∞—Ä–µ:\n"
    for user in data:
        response += f"{user['full_name']} (@{user['username']})\n"
    bot.send_message(message.chat.id, response)

# –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ä—É–ª–µ—Ç–∫–∏
gift_dict = {
    '–í–æ–¥–∞' : {
        'ratio' : 90
    },
    '–ö–æ–º–ø–ª–∏–º–µ–Ω—Ç –æ—Ç –±–∞—Ä–º–µ–Ω–∞' : {
        'ratio' : 50
    },
    '–°–∫–∏–¥–∫–∞ 5%' : {
        'ratio' : 20
    },
    '–°–∫–∏–¥–∫–∞ –Ω–∞ —à–∞–º–ø–∞–Ω—Å–∫–æ–µ 10%' : {
        'ratio' : 1
    },
    '–ö–æ–Ω—å—è–∫' : {
        'ratio' : 0.01
    },  
    '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–π—Ç–∏' : {
        'ratio' : 0.0005
    },
}


def get_gift_list(k_len=10):
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
    gift_list = []
    weights = [info['ratio'] for info in gift_dict.values()]
    gift_list = list(gift_dict.keys())

    # –í—ã–±–∏—Ä–∞–µ–º 10 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ —Å —É—á–µ—Ç–æ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
    selected_gifts = random.choices(gift_list, weights=weights, k=k_len)

    return selected_gifts


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä—É–ª–µ—Ç–∫–∏
def start_roulette(message, roulette_elements=get_gift_list()):
    chat_id = message.chat.id
    loading_messages = []
    time_sleep = 0.3
    for i, element in enumerate(roulette_elements):
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º —Ä—É–ª–µ—Ç–∫–∏
        loading_message = bot.send_message(chat_id, f"–ö—Ä—É—Ç–∏–º —Ä—É–ª–µ—Ç–∫—É... > {element}", disable_notification=True)
        loading_messages.append(loading_message)

        while len(loading_messages) > 3:
            bot.delete_message(chat_id, loading_messages[0].message_id)
            loading_messages.pop(0)
        
        # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å)
        time.sleep(time_sleep)
        time_sleep += 0.05

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    keyboard = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑!", callback_data=f"1|{message.from_user.username}|{roulette_elements[-2]}")
    keyboard.add(button)
    result_message = bot.send_message(chat_id, f"–í—ã –≤—ã–π–≥—Ä–∞–ª–∏: {roulette_elements[-2]}  üéÅ \n–£ –≤–∞—Å –µ—Å—Ç—å 5 –º–∏–Ω—É—Ç –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞!", reply_markup=keyboard)
    add_delete_message(result_message, second_delete_gift)

    time.sleep(2)
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –±–∞—Ä–∞–±–∞–Ω–∞
    for loading_message in loading_messages:     
        bot.delete_message(chat_id, loading_message.message_id)     
        time.sleep(0.5)                        

@bot.callback_query_handler(func=lambda call: True)
def handle_button_click(call):
    data = call.data.split('|')
    if data[0] == '1':
        bot.send_message(ADMIN_ID, f"@{data[1]} –≤—ã–∏–≥—Ä–∞–ª '{data[2]}'")
        bot.send_message(call.message.chat.id, "–ü–æ–¥–æ–π–¥–∏—Ç–µ –∫ –±–∞—Ä–º–µ–Ω—É!")
        bot.delete_message(call.message.chat.id, call.message.message_id)    
        #add_delete_message(call.message, 1) 
        if messages_to_delete[(call.message.chat.id, call.message.message_id)]:
            del messages_to_delete[(call.message.chat.id, call.message.message_id)]


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /roulette
@bot.message_handler(commands=['roulette'])
def handle_roulette(message):
    start_roulette(message)

messages_to_delete = {}
def add_delete_message(message, seconds=600):
    # –ü–æ–ª—É—á–∞–µ–º chat_id –∏ message_id —Å–æ–æ–±—â–µ–Ω–∏—è
    chat_id = message.chat.id
    message_id = message.message_id

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ —Å–ª–æ–≤–∞—Ä—å
    now = datetime.now()
    delete_time = now + timedelta(seconds=seconds)  # –ü—Ä–∏–º–µ—Ä: —É–¥–∞–ª—è—Ç—å —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
    messages_to_delete[(chat_id, message_id)] = delete_time

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
def delete_messages():
    while True:
        now = datetime.now()
        keys_to_delete = []
        for (chat_id, message_id), delete_time in messages_to_delete.items():
            if now >= delete_time:
                try:
                    bot.delete_message(chat_id=chat_id, message_id=message_id)
                    keys_to_delete.append((chat_id, message_id))
                except telebot.apihelper.ApiException as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        # –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã
        for key in keys_to_delete:
            del messages_to_delete[key]

        # –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        time.sleep(1)

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
delete_thread = threading.Thread(target=delete_messages)
delete_thread.daemon = True
delete_thread.start()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
while True:
    try:    
        bot.polling()
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞: {e}')
